import groovy.xml.MarkupBuilder
import org.apache.tools.ant.filters.ReplaceTokens

import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name = "techshroom"
            url "http://techshroom.github.io/downloads/maven"
        }
        maven {
            name = "VanillaGradle"
            url = "http://repo.minecrell.net/snapshots"
        }
    }
    configurations.all {
        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
        }
    }
    dependencies {
        classpath group: 'com.techshroom', name: 'Aversion', version: '1.0.1-SNAPSHOT'
        classpath 'net.minecrell:VanillaGradle:3.0-SNAPSHOT'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'aversion-util'
apply plugin: 'aversion-maven'
apply plugin: 'aversion-apt'
apply plugin: 'net.minecrell.vanilla.base'

util {
    javaVersion = '1.8'
}

repositories {
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
        name = "techshroom"
        url "http://techshroom.github.io/downloads/maven"
    }
}

configurations.apt {
   resolutionStrategy {
     // fail eagerly on version conflict (includes transitive dependencies)
     // e.g. multiple different versions of the same dependency (group and name are equal)
     failOnVersionConflict()

     // force certain versions of dependencies (including transitive)
     force 'com.google.auto.service:auto-service:1.0-SNAPSHOT',
           'com.google.dagger:dagger:2.0', 'com.google.auto:auto-common:0.4'

     cacheDynamicVersionsFor 10, 'minutes'
     // don't cache changing modules at all
     cacheChangingModulesFor 0, 'seconds'
   }
}
 
dependencies {
    addAPT group: 'com.google.auto.factory', name: 'auto-factory', version: '1.0-SNAPSHOT'
    addAPT group: 'com.google.auto.service', name: 'auto-service', version: '1.0-SNAPSHOT'
    addAPT group: 'com.google.auto.value', name: 'auto-value', version: '1.2-SNAPSHOT'
    addAPTReq name: 'aopalliance'
    addAPTReq name: 'asm'
    addAPTReq name: 'auto-value'
    addAPTReq name: 'auto-common'
    addAPTReq name: 'cglib'
    addAPTReq name: 'commons-collections'
    addAPTReq name: 'commons-lang'
    addAPTReq name: 'dagger'
    addAPTReq name: 'javawriter'
    addAPTReq name: 'javax.inject'
    addAPTReq name: 'velocity'

    compile 'com.mumfrey:liteloader:1.8-mcpnames'
    compile 'net.minecraft:launchwrapper:1.12'
    compile project(':MacrosAPI')

    testCompile group: 'junit', name: 'junit', version: '4.+'
}

group = "com.techshroom"
archivesBaseName = "CommandingText"

ext.configFile = file "build.properties"
configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

def build_number = project.hasProperty("manualbuildnum") ? project.manualbuildnum : (Integer.parseInt(System.getenv("BUILD_NUMBER") ?: "1")).toString()
version = "${project.config.mod.version}."+build_number

minecraft {
    version = project.config.mc.version
    mappings = "snapshot_20150606"
    runDir = "run"
}
reobf.setSrgMcp()

task updateVersion(type: Copy) {
    // Replace tokens
    from(sourceSets.main.java.srcDirs)
    into 'build/sources/java'
    filter(ReplaceTokens, tokens: [
        'NAME'         : name,
        'VERSION'      : config.mod.version,
        'BUILD_NUMBER' : build_number,
        'MC_VERSION'   : config.mc.version,
        'LL_VERSION'   : config.liteloader.version
    ])
}

processResources {
    //redo task if any of these properties change
    inputs.property "version", project.version
    inputs.property "mc.version", config.mc.version

    // Replace properties in all files
    from(sourceSets.main.resources.srcDirs) {
        include '**.info'
        filter(ReplaceTokens, tokens: [
            'NAME'         : name,
            'VERSION'      : config.mod.version,
            'BUILD_NUMBER' : build_number,
            'MC_VERSION'   : config.mc.version,
            'LL_VERSION'   : config.liteloader.version
        ])
    }
    // Copy everything else
    from(sourceSets.main.resources.srcDirs) {
        include 'assets/**/*.*'
    }
}

compileJava.dependsOn updateVersion

tasks.withType(Jar).each {
    it.extension 'litemod'
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
    version = "${project.minecraft.version}-${project.version}"
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
    version = "${project.minecraft.version}-${project.version}"
}

['MacrosAPI', 'CommonLib'].each { project(it) {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'aversion-util'
    apply plugin: 'net.minecrell.vanilla.base'

    util {
        javaVersion = '1.6'
    }

    repositories {
        maven {
            name = "techshroom"
            url "http://techshroom.github.io/downloads/maven"
        }
    }

    sourceSets {
        main.java {
            srcDir file('java')
        }
        main.resources {
            srcDir file('res')
        }
    }

    minecraft {
        version = rootProject.config.mc.version
        mappings = "snapshot_20150606"
    }

    dependencies {
        compile 'com.mumfrey:liteloader:1.8-mcpnames'
        compile 'net.minecraft:launchwrapper:1.12'
    }
}}
project(':MacrosAPI') {
    dependencies {
        compile project(':CommonLib')
    }
}
allprojects {
    // ffs
    makeStart.enabled = true
}
