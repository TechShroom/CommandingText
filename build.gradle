import groovy.xml.MarkupBuilder
import org.apache.tools.ant.filters.ReplaceTokens

import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name = "techshroom"
            url "http://techshroom.github.io/downloads/maven"
        }
    }
    configurations.all {
        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
        }
    }
    dependencies {
        classpath group: 'com.techshroom', name: 'Aversion', version: '1.0.1-SNAPSHOT'
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'aversion-util'
apply plugin: 'aversion-maven'
apply plugin: 'aversion-apt'
apply plugin: 'forge'

util {
    javaVersion = '1.8'
}

repositories {
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

configurations.apt {
   resolutionStrategy {
     // fail eagerly on version conflict (includes transitive dependencies)
     // e.g. multiple different versions of the same dependency (group and name are equal)
     failOnVersionConflict()

     // force certain versions of dependencies (including transitive)
     force 'com.google.auto.service:auto-service:1.0-SNAPSHOT',
           'com.google.dagger:dagger:2.0', 'com.google.auto:auto-common:0.4'

     cacheDynamicVersionsFor 10, 'minutes'
     // don't cache changing modules at all
     cacheChangingModulesFor 0, 'seconds'
   }
}
 
dependencies {
    addAPT group: 'com.google.auto.factory', name: 'auto-factory', version: '1.0-SNAPSHOT'
    addAPT group: 'com.google.auto.service', name: 'auto-service', version: '1.0-SNAPSHOT'
    addAPT group: 'com.google.auto.value', name: 'auto-value', version: '1.2-SNAPSHOT'
    addAPTReq name: 'aopalliance'
    addAPTReq name: 'asm'
    addAPTReq name: 'auto-value'
    addAPTReq name: 'auto-common'
    addAPTReq name: 'cglib'
    addAPTReq name: 'commons-collections'
    addAPTReq name: 'commons-lang'
    addAPTReq name: 'dagger'
    addAPTReq name: 'javawriter'
    addAPTReq name: 'javax.inject'
    addAPTReq name: 'velocity'

    testCompile group: 'junit', name: 'junit', version: '4.+'
}

group = "com.techshroom"
archivesBaseName = "CommandingText"

ext.configFile = file "build.properties"
configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

repositories {
    // ???
}

configurations {
    deployerJars
}

dependencies {
    // ???
}

def build_number = project.hasProperty("manualbuildnum") ? project.manualbuildnum : (Integer.parseInt(System.getenv("BUILD_NUMBER") ?: "1")).toString()
version = "${project.config.mod.version}."+build_number

minecraft {
    version = config.mc.version+"-"+config.forge.version
    if (file('../run').exists())
    {
        runDir = "../run"
    }
    else
    {
        runDir = "run"
    }
}

task updateVersion(type: Copy) {
    // Replace tokens
    from(sourceSets.main.java.srcDirs)
    into 'build/sources/java'
    filter(ReplaceTokens, tokens: [
            'VERSION'      : config.mod.version,
            'BUILD_NUMBER' : build_number,
            'MC_VERSION'   : config.mc.version,
            'FORGE_VERSION': config.forge.version
    ])
}

processResources {
    //redo task if any of these properties change
    inputs.property "version", project.version
    inputs.property "mc.version", config.mc.version

    // Replace properties in all files
    from(sourceSets.main.resources.srcDirs) {
        include '**.info'
        filter(ReplaceTokens, tokens: [
                'VERSION'      : config.mod.version,
                'BUILD_NUMBER' : build_number,
                'MC_VERSION'   : config.mc.version,
                'FORGE_VERSION': config.forge.version
        ])
    }
    // Copy everything else
    from(sourceSets.main.resources.srcDirs) {
        include 'assets/**/*.*'
    }
}

compileJava.dependsOn updateVersion

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
    version = "${project.minecraft.version}-${project.version}"
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
    version = "${project.minecraft.version}-${project.version}"
    manifest {
        attributes 'FMLCorePlugin': 'codechicken.core.launch.DepLoader'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
    }
}
